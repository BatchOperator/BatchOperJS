export declare function instanceofOr<T, O>(obj: O, type: new () => T): O extends T ? true : false;
export declare function instanceofOr<O>(obj: O, ...types: (new () => any)[]): boolean;
export declare function instanceofOr(obj: any, ...types: (new () => any)[]): boolean;
export declare function instanceofAnd<T, O>(obj: O, type: new () => T): O extends T ? true : false;
export declare function instanceofAnd<O>(obj: O, ...types: (new () => any)[]): boolean;
export declare function instanceofAnd(obj: any, ...types: (new () => any)[]): boolean;
export declare function AllInstanceofOr<T, O>(type: new () => T, obj: O): O extends T ? true : false;
export declare function AllInstanceofOr<T>(type: new () => T, ...objs: any[]): boolean;
export declare function AllInstanceofOr(type: new () => any, ...objs: any[]): boolean;
export declare function AllInstanceofAnd<T, O>(type: new () => T, obj: O): O extends T ? true : false;
export declare function AllInstanceofAnd<T>(type: new () => T, ...objs: any[]): boolean;
export declare function AllInstanceofAnd(type: new () => any, ...objs: any[]): boolean;
