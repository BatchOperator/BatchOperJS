export declare function leftShiftAll<N extends number>(num: N): N;
export declare function leftShiftAll(num: number, ...numbers: number[]): number;
export declare function rightShiftAll<N extends number>(num: N): N;
export declare function rightShiftAll(num: number, ...numbers: number[]): number;
export declare function uRightShiftAll<N extends number>(num: N): N;
export declare function uRightShiftAll(num: number, ...numbers: number[]): number;
export declare function bitAndAll<N extends number>(num: N): N;
export declare function bitAndAll(num: number, ...numbers: number[]): number;
export declare function bitXorAll<N extends number>(num: N): N;
export declare function bitXorAll(num: number, ...numbers: number[]): number;
export declare function bitOrAll<N extends number>(num: N): N;
export declare function bitOrAll(num: number, ...numbers: number[]): number;
